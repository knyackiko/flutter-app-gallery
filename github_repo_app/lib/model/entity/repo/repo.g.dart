// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'repo.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$_Repo _$$_RepoFromJson(Map<String, dynamic> json) => $checkedCreate(
      r'_$_Repo',
      json,
      ($checkedConvert) {
        final val = _$_Repo(
          id: $checkedConvert('id', (v) => v as int),
          nodeId: $checkedConvert('node_id', (v) => v as String?),
          name: $checkedConvert('name', (v) => v as String),
          fullName: $checkedConvert('full_name', (v) => v as String),
          private: $checkedConvert('private', (v) => v as bool),
          owner: $checkedConvert(
              'owner', (v) => Owner.fromJson(v as Map<String, dynamic>)),
          htmlUrl: $checkedConvert('html_url', (v) => v as String),
          description: $checkedConvert('description', (v) => v as String?),
          fork: $checkedConvert('fork', (v) => v as bool?),
          url: $checkedConvert('url', (v) => v as String?),
          forksUrl: $checkedConvert('forks_url', (v) => v as String?),
          keysUrl: $checkedConvert('keys_url', (v) => v as String?),
          collaboratorsUrl:
              $checkedConvert('collaborators_url', (v) => v as String?),
          teamsUrl: $checkedConvert('teams_url', (v) => v as String?),
          hooksUrl: $checkedConvert('hooks_url', (v) => v as String?),
          issueEventsUrl:
              $checkedConvert('issue_events_url', (v) => v as String?),
          eventsUrl: $checkedConvert('events_url', (v) => v as String?),
          assigneesUrl: $checkedConvert('assignees_url', (v) => v as String?),
          branchesUrl: $checkedConvert('branches_url', (v) => v as String?),
          tagsUrl: $checkedConvert('tags_url', (v) => v as String?),
          blobsUrl: $checkedConvert('blobs_url', (v) => v as String?),
          gitTagsUrl: $checkedConvert('git_tags_url', (v) => v as String?),
          gitRefsUrl: $checkedConvert('git_refs_url', (v) => v as String?),
          treesUrl: $checkedConvert('trees_url', (v) => v as String?),
          statusesUrl: $checkedConvert('statuses_url', (v) => v as String?),
          languagesUrl: $checkedConvert('languages_url', (v) => v as String?),
          stargazersUrl: $checkedConvert('stargazers_url', (v) => v as String?),
          contributorsUrl:
              $checkedConvert('contributors_url', (v) => v as String?),
          subscribersUrl:
              $checkedConvert('subscribers_url', (v) => v as String?),
          subscriptionUrl:
              $checkedConvert('subscription_url', (v) => v as String?),
          commitsUrl: $checkedConvert('commits_url', (v) => v as String?),
          gitCommitsUrl:
              $checkedConvert('git_commits_url', (v) => v as String?),
          commentsUrl: $checkedConvert('comments_url', (v) => v as String?),
          issueCommentUrl:
              $checkedConvert('issue_comment_url', (v) => v as String?),
          contentsUrl: $checkedConvert('contents_url', (v) => v as String?),
          compareUrl: $checkedConvert('compare_url', (v) => v as String?),
          mergesUrl: $checkedConvert('merges_url', (v) => v as String?),
          archiveUrl: $checkedConvert('archive_url', (v) => v as String?),
          downloadsUrl: $checkedConvert('downloads_url', (v) => v as String?),
          issuesUrl: $checkedConvert('issues_url', (v) => v as String?),
          pullsUrl: $checkedConvert('pulls_url', (v) => v as String?),
          milestonesUrl: $checkedConvert('milestones_url', (v) => v as String?),
          notificationsUrl:
              $checkedConvert('notifications_url', (v) => v as String?),
          labelsUrl: $checkedConvert('labels_url', (v) => v as String?),
          releasesUrl: $checkedConvert('releases_url', (v) => v as String?),
          deploymentsUrl:
              $checkedConvert('deployments_url', (v) => v as String?),
          createdAt:
              $checkedConvert('created_at', (v) => DateTime.parse(v as String)),
          updatedAt:
              $checkedConvert('updated_at', (v) => DateTime.parse(v as String)),
          pushedAt:
              $checkedConvert('pushed_at', (v) => DateTime.parse(v as String)),
          gitUrl: $checkedConvert('git_url', (v) => v as String?),
          sshUrl: $checkedConvert('ssh_url', (v) => v as String?),
          cloneUrl: $checkedConvert('clone_url', (v) => v as String?),
          svnUrl: $checkedConvert('svn_url', (v) => v as String?),
          homepage: $checkedConvert('homepage', (v) => v as String?),
          size: $checkedConvert('size', (v) => v as int?),
          stargazersCount:
              $checkedConvert('stargazers_count', (v) => v as int?),
          watchersCount: $checkedConvert('watchers_count', (v) => v as int?),
          language: $checkedConvert('language', (v) => v as String?),
          hasIssues: $checkedConvert('has_issues', (v) => v as bool?),
          hasProjects: $checkedConvert('has_projects', (v) => v as bool?),
          hasDownloads: $checkedConvert('has_downloads', (v) => v as bool?),
          hasWiki: $checkedConvert('has_wiki', (v) => v as bool?),
          hasPages: $checkedConvert('has_pages', (v) => v as bool?),
          forksCount: $checkedConvert('forks_count', (v) => v as int?),
          mirrorUrl: $checkedConvert('mirror_url', (v) => v as String?),
          archived: $checkedConvert('archived', (v) => v as bool?),
          disabled: $checkedConvert('disabled', (v) => v as bool?),
          openIssuesCount:
              $checkedConvert('open_issues_count', (v) => v as int?),
          license: $checkedConvert(
              'license',
              (v) => v == null
                  ? null
                  : License.fromJson(v as Map<String, dynamic>)),
          forks: $checkedConvert('forks', (v) => v as int?),
          openIssues: $checkedConvert('open_issues', (v) => v as int?),
          watchers: $checkedConvert('watchers', (v) => v as int?),
          defaultBranch: $checkedConvert('default_branch', (v) => v as String?),
        );
        return val;
      },
      fieldKeyMap: const {
        'nodeId': 'node_id',
        'fullName': 'full_name',
        'htmlUrl': 'html_url',
        'forksUrl': 'forks_url',
        'keysUrl': 'keys_url',
        'collaboratorsUrl': 'collaborators_url',
        'teamsUrl': 'teams_url',
        'hooksUrl': 'hooks_url',
        'issueEventsUrl': 'issue_events_url',
        'eventsUrl': 'events_url',
        'assigneesUrl': 'assignees_url',
        'branchesUrl': 'branches_url',
        'tagsUrl': 'tags_url',
        'blobsUrl': 'blobs_url',
        'gitTagsUrl': 'git_tags_url',
        'gitRefsUrl': 'git_refs_url',
        'treesUrl': 'trees_url',
        'statusesUrl': 'statuses_url',
        'languagesUrl': 'languages_url',
        'stargazersUrl': 'stargazers_url',
        'contributorsUrl': 'contributors_url',
        'subscribersUrl': 'subscribers_url',
        'subscriptionUrl': 'subscription_url',
        'commitsUrl': 'commits_url',
        'gitCommitsUrl': 'git_commits_url',
        'commentsUrl': 'comments_url',
        'issueCommentUrl': 'issue_comment_url',
        'contentsUrl': 'contents_url',
        'compareUrl': 'compare_url',
        'mergesUrl': 'merges_url',
        'archiveUrl': 'archive_url',
        'downloadsUrl': 'downloads_url',
        'issuesUrl': 'issues_url',
        'pullsUrl': 'pulls_url',
        'milestonesUrl': 'milestones_url',
        'notificationsUrl': 'notifications_url',
        'labelsUrl': 'labels_url',
        'releasesUrl': 'releases_url',
        'deploymentsUrl': 'deployments_url',
        'createdAt': 'created_at',
        'updatedAt': 'updated_at',
        'pushedAt': 'pushed_at',
        'gitUrl': 'git_url',
        'sshUrl': 'ssh_url',
        'cloneUrl': 'clone_url',
        'svnUrl': 'svn_url',
        'stargazersCount': 'stargazers_count',
        'watchersCount': 'watchers_count',
        'hasIssues': 'has_issues',
        'hasProjects': 'has_projects',
        'hasDownloads': 'has_downloads',
        'hasWiki': 'has_wiki',
        'hasPages': 'has_pages',
        'forksCount': 'forks_count',
        'mirrorUrl': 'mirror_url',
        'openIssuesCount': 'open_issues_count',
        'openIssues': 'open_issues',
        'defaultBranch': 'default_branch'
      },
    );

Map<String, dynamic> _$$_RepoToJson(_$_Repo instance) => <String, dynamic>{
      'id': instance.id,
      'node_id': instance.nodeId,
      'name': instance.name,
      'full_name': instance.fullName,
      'private': instance.private,
      'owner': instance.owner,
      'html_url': instance.htmlUrl,
      'description': instance.description,
      'fork': instance.fork,
      'url': instance.url,
      'forks_url': instance.forksUrl,
      'keys_url': instance.keysUrl,
      'collaborators_url': instance.collaboratorsUrl,
      'teams_url': instance.teamsUrl,
      'hooks_url': instance.hooksUrl,
      'issue_events_url': instance.issueEventsUrl,
      'events_url': instance.eventsUrl,
      'assignees_url': instance.assigneesUrl,
      'branches_url': instance.branchesUrl,
      'tags_url': instance.tagsUrl,
      'blobs_url': instance.blobsUrl,
      'git_tags_url': instance.gitTagsUrl,
      'git_refs_url': instance.gitRefsUrl,
      'trees_url': instance.treesUrl,
      'statuses_url': instance.statusesUrl,
      'languages_url': instance.languagesUrl,
      'stargazers_url': instance.stargazersUrl,
      'contributors_url': instance.contributorsUrl,
      'subscribers_url': instance.subscribersUrl,
      'subscription_url': instance.subscriptionUrl,
      'commits_url': instance.commitsUrl,
      'git_commits_url': instance.gitCommitsUrl,
      'comments_url': instance.commentsUrl,
      'issue_comment_url': instance.issueCommentUrl,
      'contents_url': instance.contentsUrl,
      'compare_url': instance.compareUrl,
      'merges_url': instance.mergesUrl,
      'archive_url': instance.archiveUrl,
      'downloads_url': instance.downloadsUrl,
      'issues_url': instance.issuesUrl,
      'pulls_url': instance.pullsUrl,
      'milestones_url': instance.milestonesUrl,
      'notifications_url': instance.notificationsUrl,
      'labels_url': instance.labelsUrl,
      'releases_url': instance.releasesUrl,
      'deployments_url': instance.deploymentsUrl,
      'created_at': instance.createdAt.toIso8601String(),
      'updated_at': instance.updatedAt.toIso8601String(),
      'pushed_at': instance.pushedAt.toIso8601String(),
      'git_url': instance.gitUrl,
      'ssh_url': instance.sshUrl,
      'clone_url': instance.cloneUrl,
      'svn_url': instance.svnUrl,
      'homepage': instance.homepage,
      'size': instance.size,
      'stargazers_count': instance.stargazersCount,
      'watchers_count': instance.watchersCount,
      'language': instance.language,
      'has_issues': instance.hasIssues,
      'has_projects': instance.hasProjects,
      'has_downloads': instance.hasDownloads,
      'has_wiki': instance.hasWiki,
      'has_pages': instance.hasPages,
      'forks_count': instance.forksCount,
      'mirror_url': instance.mirrorUrl,
      'archived': instance.archived,
      'disabled': instance.disabled,
      'open_issues_count': instance.openIssuesCount,
      'license': instance.license,
      'forks': instance.forks,
      'open_issues': instance.openIssues,
      'watchers': instance.watchers,
      'default_branch': instance.defaultBranch,
    };
